package com.example.hutool.zip.handlers;

import java.io.File;
import java.nio.file.Paths;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.console.ConsolePlugin;
import org.eclipse.ui.console.IConsole;
import org.eclipse.ui.console.MessageConsole;
import org.eclipse.ui.console.MessageConsoleStream;
import org.eclipse.ui.handlers.HandlerUtil;

import cn.hutool.core.io.FileUtil;
import cn.hutool.core.util.ZipUtil;
import cn.hutool.system.SystemUtil;

/**
 * 压缩文件夹的处理程序
 */
public class ZipHandler extends AbstractHandler {

    // 文件路径配置
    private static final String SOURCE_DIR = "c:/opt/vpms-server/models/life-models";
    private static final String TARGET_ZIP = "c:/opt/vpms-server/models/life-models.zip";

    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {
        Shell shell = HandlerUtil.getActiveShell(event);
        
        // 确认对话框
        if (!MessageDialog.openConfirm(shell, "确认压缩", 
                "确定要压缩文件夹吗？\n\n" +
                "源文件夹: " + SOURCE_DIR + "\n" +
                "目标ZIP: " + TARGET_ZIP)) {
            return null;
        }
        
        // 创建并启动后台作业
        Job job = new Job("压缩文件夹") {
            @Override
            protected IStatus run(IProgressMonitor monitor) {
                monitor.beginTask("准备压缩...", IProgressMonitor.UNKNOWN);
                
                MessageConsole console = findConsole("文件夹压缩控制台");
                MessageConsoleStream out = console.newMessageStream();
                
                try {
                    out.println("开始压缩文件夹: " + SOURCE_DIR);
                    out.println("目标ZIP: " + TARGET_ZIP);
                    out.println("系统信息: " + SystemUtil.getOsInfo());
                    out.println("Java版本: " + SystemUtil.getJavaVersion());
                    out.println("Hutool版本: " + cn.hutool.core.util.RuntimeUtil.getJarInfo(ZipUtil.class).getVersion());
                    out.println("--------------------------------");
                    
                    // 显示控制台
                    showConsole(console);
                    
                    // 检查源文件夹是否存在
                    File sourceDir = new File(SOURCE_DIR);
                    if (!sourceDir.exists() || !sourceDir.isDirectory()) {
                        throw new Exception("源文件夹不存在: " + SOURCE_DIR);
                    }
                    
                    // 检查目标文件是否存在，如有则删除
                    File targetZip = new File(TARGET_ZIP);
                    if (targetZip.exists()) {
                        out.println("目标ZIP文件已存在，正在删除...");
                        FileUtil.del(targetZip);
                        out.println("已删除现有ZIP文件");
                    }
                    
                    // 创建父目录（如果不存在）
                    File parentDir = targetZip.getParentFile();
                    if (!parentDir.exists()) {
                        out.println("创建目标目录: " + parentDir.getAbsolutePath());
                        FileUtil.mkdir(parentDir);
                    }
                    
                    // 使用Hutool压缩文件夹
                    monitor.subTask("正在压缩...");
                    out.println("开始压缩，这可能需要一些时间...");
                    
                    // 执行压缩并获取进度
                    ZipUtil.zip(SOURCE_DIR, TARGET_ZIP, true, (total, progress, sourceFile) -> {
                        // 更新进度条
                        if (total > 0) {
                            monitor.worked((int) (1000 * progress / total));
                        }
                        
                        // 每10%打印一次进度
                        if ((int) (10 * progress / total) > (int) (10 * (progress - 1) / total)) {
                            out.println(String.format("压缩进度: %.1f%% - 处理文件: %s", 
                                    progress * 100.0 / total, 
                                    sourceFile.getAbsolutePath()));
                        }
                        
                        // 检查是否取消
                        return !monitor.isCanceled();
                    });
                    
                    // 验证压缩结果
                    if (!targetZip.exists()) {
                        throw new Exception("压缩失败，ZIP文件未生成");
                    }
                    
                    long zipSize = targetZip.length();
                    long sourceSize = FileUtil.size(sourceDir);
                    
                    out.println("--------------------------------");
                    out.println("压缩完成!");
                    out.println("源文件夹大小: " + formatSize(sourceSize));
                    out.println("ZIP文件大小: " + formatSize(zipSize));
                    out.println("压缩率: " + String.format("%.2f%%", (1 - (double)zipSize/sourceSize) * 100));
                    out.println("ZIP文件位置: " + targetZip.getAbsolutePath());
                    
                    return Status.OK_STATUS;
                } catch (Exception e) {
                    out.println("压缩失败: " + e.getMessage());
                    e.printStackTrace();
                    return new Status(IStatus.ERROR, "com.example.hutool.zip", "压缩失败", e);
                } finally {
                    monitor.done();
                    try {
                        out.close();
                    } catch (Exception e) {
                        // 忽略
                    }
                }
            }
        };
        
        job.setUser(true);
        job.schedule();
        
        return null;
    }
    
    /**
     * 查找或创建控制台
     */
    private MessageConsole findConsole(String name) {
        ConsolePlugin plugin = ConsolePlugin.getDefault();
        IConsoleManager conMan = plugin.getConsoleManager();
        IConsole[] existing = conMan.getConsoles();
        
        for (int i = 0; i < existing.length; i++) {
            if (name.equals(existing[i].getName())) {
                return (MessageConsole) existing[i];
            }
        }
        
        // 创建新控制台
        MessageConsole myConsole = new MessageConsole(name, null);
        conMan.addConsoles(new IConsole[] { myConsole });
        return myConsole;
    }
    
    /**
     * 显示控制台
     */
    private void showConsole(final MessageConsole console) {
        PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
            ConsolePlugin plugin = ConsolePlugin.getDefault();
            IConsoleManager conMan = plugin.getConsoleManager();
            conMan.showConsoleView(console);
        });
    }
    
    /**
     * 格式化文件大小
     */
    private String formatSize(long bytes) {
        return FileUtil.readableFileSize(bytes);
    }
}    
