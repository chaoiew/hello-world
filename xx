package com.hsbc.ipe.vpms.deploy.handlers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.console.ConsolePlugin;
import org.eclipse.ui.console.IConsole;
import org.eclipse.ui.console.MessageConsole;
import org.eclipse.ui.console.MessageConsoleStream;
import org.eclipse.ui.handlers.HandlerUtil;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

/**
 * 部署到远程服务器的处理程序
 */
public class DeployHandler extends AbstractHandler {

    // 服务器配置
    private static final String HOST = "192.168.1.3";
    private static final int PORT = 22;
    private static final String USERNAME = "root";
    private static final String PASSWORD = "root";
    
    // 文件路径配置
    private static final String LOCAL_ZIP_FILE = "c:/opt/vpms-server/models/life-models.zip";
    private static final String REMOTE_MODELS_DIR = "/opt/vpms-server/models/";
    private static final String REMOTE_START_SCRIPT = "/opt/vpms-server/start.sh";
    
    // 命令列表
    private static final String CMD_KILL_SERVER = "pkill -9 -f \"vpms-server-launch.jar\"";
    private static final String CMD_RM_MODELS_DIR = "rm -rf " + REMOTE_MODELS_DIR + "life-models";
    private static final String CMD_UNZIP = "unzip -o " + REMOTE_MODELS_DIR + "life-models.zip -d " + REMOTE_MODELS_DIR;
    private static final String CMD_START_SERVER = "sh " + REMOTE_START_SCRIPT;

    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {
        Shell shell = HandlerUtil.getActiveShell(event);
        
        // 确认对话框
        if (!MessageDialog.openConfirm(shell, "确认部署", 
                "确定要部署到远程服务器吗？\n\n" +
                "服务器: " + USERNAME + "@" + HOST + ":" + PORT + "\n" +
                "本地文件: " + LOCAL_ZIP_FILE + "\n" +
                "目标目录: " + REMOTE_MODELS_DIR)) {
            return null;
        }
        
        // 创建并启动后台作业
        Job job = new Job("部署到远程服务器") {
            @Override
            protected IStatus run(IProgressMonitor monitor) {
                monitor.beginTask("准备部署...", 6); // 6个步骤
                
                MessageConsole console = findConsole("远程部署控制台");
                MessageConsoleStream out = console.newMessageStream();
                
                try {
                    out.println("开始部署到远程服务器: " + HOST);
                    out.println("=====================================");
                    
                    // 显示控制台
                    showConsole(console);
                    
                    // 检查本地文件是否存在
                    File localFile = new File(LOCAL_ZIP_FILE);
                    if (!localFile.exists()) {
                        throw new IOException("本地文件不存在: " + LOCAL_ZIP_FILE);
                    }
                    
                    // 连接到服务器
                    out.println("正在连接到服务器...");
                    try (RemoteSession session = new RemoteSession(USERNAME, HOST, PORT, PASSWORD)) {
                        session.connect();
                        out.println("已成功连接到服务器");
                        monitor.worked(1);
                        
                        // 步骤1: 停止服务器
                        executeCommand(session, CMD_KILL_SERVER, "停止服务器", out, monitor);
                        
                        // 步骤2: 上传ZIP文件
                        uploadFile(session, localFile, REMOTE_MODELS_DIR, "上传文件", out, monitor);
                        
                        // 步骤3: 删除旧目录
                        executeCommand(session, CMD_RM_MODELS_DIR, "删除旧目录", out, monitor);
                        
                        // 步骤4: 解压文件
                        executeCommand(session, CMD_UNZIP, "解压文件", out, monitor);
                        
                        // 步骤5: 启动服务器
                        executeCommand(session, CMD_START_SERVER, "启动服务器", out, monitor);
                    }
                    
                    out.println("=====================================");
                    out.println("部署完成!");
                    return Status.OK_STATUS;
                } catch (Exception e) {
                    out.println("部署失败: " + e.getMessage());
                    e.printStackTrace();
                    return new Status(IStatus.ERROR, "com.hsbc.ipe.vpms.deploy", "部署失败", e);
                } finally {
                    monitor.done();
                    try {
                        out.close();
                    } catch (Exception e) {
                        // 忽略
                    }
                }
            }
        };
        
        job.setUser(true);
        job.schedule();
        
        return null;
    }
    
    /**
     * 执行远程命令
     */
    private void executeCommand(RemoteSession session, String command, String stepName, 
            MessageConsoleStream out, IProgressMonitor monitor) throws Exception {
        
        out.println("\n[" + stepName + "] 执行命令: " + command);
        CommandResult result = session.executeCommand(command);
        
        if (!result.isSuccess()) {
            out.println("命令执行失败，退出代码: " + result.getExitCode());
            throw new Exception("命令执行失败: " + command);
        }
        
        out.println("[" + stepName + "] 命令执行成功");
        monitor.worked(1);
    }
    
    /**
     * 上传文件到远程服务器
     */
    private void uploadFile(RemoteSession session, File localFile, String remoteDir, 
            String stepName, MessageConsoleStream out, IProgressMonitor monitor) throws Exception {
        
        out.println("\n[" + stepName + "] 开始上传文件: " + localFile.getAbsolutePath());
        out.println("目标路径: " + remoteDir);
        
        session.uploadFile(localFile, remoteDir);
        
        out.println("[" + stepName + "] 文件上传成功，大小: " + formatFileSize(localFile.length()));
        monitor.worked(1);
    }
    
    /**
     * 查找或创建控制台
     */
    private MessageConsole findConsole(String name) {
        ConsolePlugin plugin = ConsolePlugin.getDefault();
        IConsoleManager conMan = plugin.getConsoleManager();
        IConsole[] existing = conMan.getConsoles();
        
        for (int i = 0; i < existing.length; i++) {
            if (name.equals(existing[i].getName())) {
                return (MessageConsole) existing[i];
            }
        }
        
        // 创建新控制台
        MessageConsole myConsole = new MessageConsole(name, null);
        conMan.addConsoles(new IConsole[] { myConsole });
        return myConsole;
    }
    
    /**
     * 显示控制台
     */
    private void showConsole(final MessageConsole console) {
        PlatformUI.getWorkbench().getDisplay().asyncExec(() -> {
            ConsolePlugin plugin = ConsolePlugin.getDefault();
            IConsoleManager conMan = plugin.getConsoleManager();
            conMan.showConsoleView(console);
        });
    }
    
    /**
     * 格式化文件大小
     */
    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1048576) return String.format("%.2f KB", bytes / 1024.0);
        if (bytes < 1073741824) return String.format("%.2f MB", bytes / 1048576.0);
        return String.format("%.2f GB", bytes / 1073741824.0);
    }
    
    /**
     * 远程会话工具类
     */
    private static class RemoteSession implements AutoCloseable {
        private final String username;
        private final String host;
        private final int port;
        private final String password;
        private Session session;
        
        public RemoteSession(String username, String host, int port, String password) {
            this.username = username;
            this.host = host;
            this.port = port;
            this.password = password;
        }
        
        public void connect() throws Exception {
            JSch jsch = new JSch();
            session = jsch.getSession(username, host, port);
            session.setPassword(password);
            
            // 配置会话
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            
            // 连接服务器
            session.connect();
        }
        
        public CommandResult executeCommand(String command) throws Exception {
            Channel channel = session.openChannel("exec");
            ((ChannelExec) channel).setCommand(command);
            
            // 获取命令输出流
            channel.setInputStream(null);
            ((ChannelExec) channel).setErrStream(System.err);
            
            InputStream in = channel.getInputStream();
            channel.connect();
            
            // 读取命令输出
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuilder output = new StringBuilder();
            String line;
            
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
                System.out.println(line); // 实时输出到控制台
            }
            
            // 等待命令执行完成
            while (channel.isConnected()) {
                Thread.sleep(100);
            }
            
            int exitCode = channel.getExitStatus();
            channel.disconnect();
            
            return new CommandResult(exitCode, output.toString());
        }
        
        public void uploadFile(File localFile, String remoteDir) throws Exception {
            Channel channel = session.openChannel("sftp");
            channel.connect();
            ChannelSftp sftp = (ChannelSftp) channel;
            
            try {
                // 确保目标目录存在
                try {
                    sftp.cd(remoteDir);
                } catch (SftpException e) {
                    sftp.mkdir(remoteDir);
                    sftp.cd(remoteDir);
                }
                
                // 上传文件
                try (FileInputStream fis = new FileInputStream(localFile)) {
                    sftp.put(fis, localFile.getName());
                }
            } finally {
                sftp.disconnect();
                channel.disconnect();
            }
        }
        
        @Override
        public void close() {
            if (session != null && session.isConnected()) {
                session.disconnect();
            }
        }
    }
    
    /**
     * 命令执行结果类
     */
    private static class CommandResult {
        private final int exitCode;
        private final String output;
        
        public CommandResult(int exitCode, String output) {
            this.exitCode = exitCode;
            this.output = output;
        }
        
        public int getExitCode() {
            return exitCode;
        }
        
        public String getOutput() {
            return output;
        }
        
        public boolean isSuccess() {
            return exitCode == 0;
        }
    }
}    
